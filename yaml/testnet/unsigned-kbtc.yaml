hash: dBOdRKr8zmaNBL6MxKJkLRcX35IZLR8ech_kL6yPq1E
sigs:
  16e461ea50647c1b24183a4fb188cc6b2e84e721dc584cef96357a5a2d98c3a0: null
cmd: '{"networkId":"testnet04","payload":{"exec":{"data":{"restrict":{"pred":"keys-all","keys":["a66a7b652dcc373092d5dcaf3257190875abe8fc145f40ab5578efa4b9dd44f4"]},"revoker":{"pred":"keys-all","keys":["44c55dc90dc9d85662a2960203fa9dd11f8bf471b3b9f8e3f0156493c7b25a43"]},"ns":"user","module-admin":{"pred":"keys-all","keys":["16e461ea50647c1b24183a4fb188cc6b2e84e721dc584cef96357a5a2d98c3a0"]},"upgrade":false,"wrapped-ns-user":null,"burner":{"pred":"keys-all","keys":["31631f9db6bf9085a0bdd71d34e1b7001c8c7c7b187710e86eb2dd4104798c8b"]},"minter":{"pred":"keys-all","keys":["1d48b58e835d90182ced21cbd2be5801a1d1dbffda484b8a338293216da67603"]}},"code":"(namespace (read-msg ''ns))\n(module kBTC GOVERNANCE\n\n  @doc \"Fungible token for Wrapped kBTC\"\n  @model [\n\n    ;; conserves-mass\n    (property\n      (= (column-delta ledger ''balance ) 0.0)\n      { ''except:\n        [ burn                 ;; burn-role-guard\n        , mint                 ;; mint-role-guard\n        , debit                ;; PRIVATE\n        , credit               ;; PRIVATE\n        , credit-account       ;; PRIVATE\n        , transfer-crosschain  ;; xchain decomposition\n        , xchain-send          ;; PRIVATE\n        , xchain-receive       ;; PRIVATE\n        ] } )\n\n    ;; role-write-guard\n    (property\n      (forall (k:string)\n        (when (row-written roles k)\n          (row-enforced roles ''guard \"module-admin\")))\n      { ''except:\n        [ init-roles            ;; install only\n          transfer-crosschain   ;; xchain decomposition\n      ] } )\n\n    ;; ledger-write-guard\n    (property\n      (forall (k:string)\n        (when (row-written ledger k)\n          (row-enforced ledger ''guard k)))\n      { ''except:\n        [ mint                 ;; mint-role-guard\n          burn                 ;; burn-role-guard\n          revoke               ;; revoke-role-guard\n          manage-restriction   ;; restrict-role-guard\n          create-account       ;; insert only\n          transfer             ;; account-guard-enforced sender\n          transfer-create      ;; account-guard-enforced sender\n          transfer-crosschain  ;; xchain decomposition\n          debit                ;; PRIVATE\n          credit               ;; PRIVATE\n          credit-account       ;; PRIVATE\n          xchain-receive       ;; PRIVATE\n        ]\n      })\n\n    ;; burn-role-guard\n    (property (row-enforced roles ''guard \"burner\")\n      { ''only: [burn] })\n    ;; mint-role-guard\n    (property (row-enforced roles ''guard \"minter\")\n      { ''only: [mint] })\n    ;; revoke-role-guard\n    (property (row-enforced roles ''guard \"revoker\")\n      { ''only: [revoke] })\n    ;; restrict-role-guard\n    (property (row-enforced roles ''guard \"restrict\")\n      { ''only: [manage-restriction] })\n\n    (defproperty account-guard-enforced (account:string)\n      (when (row-written ledger account)\n        (row-enforced ledger ''guard account)))\n\n  ]\n\n  (implements fungible-v2)\n  (implements wrapped-token-v1)\n  (use wrapped-token-v1\n    [ ROLE_MODULE_ADMIN ROLE_BURNER ROLE_MINTER\n      ROLE_REVOKER ROLE_RESTRICT ])\n  (use wrapped-util)\n\n  ;;\n  ;; tables/schemas\n  ;;\n\n  (defschema role-schema\n    guard:guard)\n\n  (deftable roles:{role-schema})\n\n  (defschema account-schema\n    balance:decimal\n    guard:guard\n    restricted:bool\n  )\n\n  (deftable ledger:{account-schema})\n\n  ;;\n  ;; capabilities\n  ;;\n\n  (defcap GOVERNANCE ()\n    @doc \"Module admin capability\"\n    (compose-capability (ROLE ROLE_MODULE_ADMIN))\n  )\n\n  (defcap ROLE (role:string)\n    @doc \"Composable capability for role enforcement\"\n    (enforce-guard (at ''guard (read roles role)))\n  )\n\n  (defcap UPDATE_ROLE:bool (role:string)\n    @doc \"Managed cap/event for updating role\"\n    @managed\n    (compose-capability (ROLE ROLE_MODULE_ADMIN))\n  )\n\n  (defcap ACCOUNT_GUARD (account:string)\n    (enforce-guard (at ''guard (read ledger account)))\n  )\n\n  (defcap DEBIT (sender:string)\n    @doc \"Capability for managing debiting operations\"\n    (enforce-valid-account sender)\n  )\n\n  (defcap XCHAIN () \"Private cap for crosschain\" true)\n\n  (defcap XCHAIN_DEBIT (sender:string)\n    @doc \"Capability for managing debiting operations\"\n    (compose-capability (DEBIT sender))\n    (compose-capability (ACCOUNT_GUARD sender))\n    (compose-capability (UNRESTRICTED sender))\n  )\n\n  (defcap CREDIT (receiver:string)\n    @doc \"Capability for managing crediting operations\"\n    (enforce-valid-account receiver)\n    (compose-capability (UNRESTRICTED receiver))\n  )\n\n  (defcap MANAGE_RESTRICTION:bool (account:string restricted:bool)\n    @doc \"Managed cap/event for managing account restriction\"\n    @managed\n    (compose-capability (ROLE ROLE_RESTRICT))\n  )\n\n  (defcap REVOKE:bool (account:string revoke-account:string amount:decimal)\n    @doc \"Revocation administrative action\"\n    @managed\n    (enforce-valid-transfer account revoke-account (precision) amount)\n    (compose-capability (ROLE ROLE_REVOKER))\n    (compose-capability (DEBIT account))\n    (compose-capability (CREDIT revoke-account))\n    (enforce-restriction account true) ;; account must be restricted to revoke\n  )\n\n  (defcap UNRESTRICTED (account:string)\n    @doc \"Enforce account not restricted\"\n    (enforce-restriction account false)\n  )\n\n  (defcap ROTATE (account:string)\n    @doc \"Managed cap/event for user account rotation\"\n    @managed\n    (compose-capability (ACCOUNT_GUARD account))\n  )\n\n  (defcap TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed amount TRANSFER-mgr\n    (enforce-valid-transfer sender receiver (precision) amount)\n    (compose-capability (DEBIT sender))\n    (compose-capability (ACCOUNT_GUARD sender))\n    (compose-capability (CREDIT receiver))\n    (compose-capability (UNRESTRICTED sender))\n  )\n\n  (defun TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n    (enforce-transfer-manager managed requested)\n  )\n\n  (defcap MINT:bool (recipient:string amount:decimal)\n    @doc \"Managed cap/event for minting\"\n    @managed\n    (compose-capability (ROLE ROLE_MINTER))\n    (compose-capability (CREDIT recipient))\n    (enforce-valid-amount (precision) amount)\n  )\n\n  (defcap BURN:bool (sender:string amount:decimal)\n    @doc \"Managed cap/event for burning\"\n    @managed\n    (compose-capability (ROLE ROLE_BURNER))\n    (compose-capability (DEBIT sender))\n    (enforce-valid-amount (precision) amount)\n  )\n\n  ;;\n  ;; wrapped-token-v1 functionality\n  ;;\n\n  (defun init-roles ()\n    (insert roles ROLE_BURNER\n      { ''guard: (read-keyset ROLE_BURNER) })\n    (insert roles ROLE_MINTER\n      { ''guard: (read-keyset ROLE_MINTER) })\n    (insert roles ROLE_REVOKER\n      { ''guard: (read-keyset ROLE_REVOKER) })\n    (insert roles ROLE_RESTRICT\n      { ''guard: (read-keyset ROLE_RESTRICT) })\n    (insert roles ROLE_MODULE_ADMIN\n      { ''guard: (read-keyset ROLE_MODULE_ADMIN) })\n  )\n\n  (defun update-role:string (role:string guard:guard)\n    \"Update role, guarded by UPDATE_ROLE\"\n    (with-capability (UPDATE_ROLE role)\n      (update roles role { ''guard: guard }))\n  )\n\n  (defun get-role:object{role-schema} (role:string)\n    (read roles role))\n\n  (defun manage-restriction:string\n    ( account:string\n      restricted:bool\n    )\n    (with-capability (MANAGE_RESTRICTION account restricted)\n      (update ledger account { ''restricted: restricted }))\n  )\n\n  (defun is-restricted:bool (account:string)\n    (with-default-read ledger account\n      { ''restricted: false } { ''restricted:= r }\n      r)\n  )\n\n  (defun enforce-restriction (account:string restriction:bool)\n    \"Enforce ACCOUNT restriction is RESTRICTION\"\n    (let ((r (is-restricted account)))\n      (enforce (= r restriction)\n        (if r \"Account Restricted\" \"Account Unrestricted\")))\n  )\n\n  (defun revoke:string\n    ( account:string\n      revoke-account:string\n      amount:decimal\n    )\n    @doc \"Administrative revocation action\"\n    (with-capability (REVOKE account revoke-account amount)\n      (emit-event (TRANSFER account revoke-account amount))\n      (debit account amount)\n      (credit-account revoke-account amount)\n    )\n  )\n\n  (defun mint:string\n    ( recipient:string\n      recipient-guard:guard\n      amount:decimal\n    )\n    @doc \"Administrative mint action\"\n    (with-capability (MINT recipient amount)\n      (credit recipient recipient-guard amount)\n      (emit-event (TRANSFER \"\" recipient amount))\n      \"Mint succeeded\")\n  )\n\n  (defun burn:string\n    ( sender:string\n      amount:decimal\n    )\n    @doc \"Administrative burn action\"\n    (with-capability (BURN sender amount)\n      (debit sender amount)\n      (emit-event (TRANSFER sender \"\" amount))\n      \"Burn succeeded\")\n  )\n\n  ;;\n  ;; fungible-v2 functionality\n  ;;\n\n  (defconst MINIMUM_PRECISION 8)\n\n  (defun precision:integer ()\n    MINIMUM_PRECISION)\n\n  (defun enforce-unit:bool (amount:decimal)\n    (enforce-precision (precision) amount))\n\n  (defun create-account:string\n    ( account:string\n      guard:guard\n    )\n    (enforce-valid-account account)\n    (enforce-reserved account guard)\n    (insert ledger account\n      { \"balance\" : 0.0\n      , \"guard\"   : guard\n      , \"restricted\" : false\n      })\n  )\n\n  (defun get-balance:decimal (account:string)\n    (at ''balance (read ledger account))\n  )\n\n  (defun details:object{fungible-v2.account-details}\n    ( account:string )\n    (with-read ledger account\n      { \"balance\" := bal\n      , \"guard\" := g }\n      { \"account\" : account\n      , \"balance\" : bal\n      , \"guard\": g })\n  )\n\n  (defun rotate:string (account:string new-guard:guard)\n    (with-capability (ROTATE account)\n      (update ledger account\n        { \"guard\" : new-guard }))\n  )\n\n  (defun transfer:string\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n\n    @model [(property (account-guard-enforced sender))]\n\n    (enforce-valid-interparty-transfer sender receiver (precision) amount)\n    (with-capability (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (credit-account receiver amount))\n  )\n\n  (defun transfer-create:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal )\n\n    @model [(property (account-guard-enforced sender))]\n\n    (enforce-valid-interparty-transfer sender receiver (precision) amount)\n    (with-capability (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (credit receiver receiver-guard amount))\n  )\n\n  (defun debit:string (account:string amount:decimal)\n    (require-capability (DEBIT account))\n    (update ledger account\n      { ''balance:\n        (compute-debit\n          (get-balance account) amount) })\n  )\n\n  (defun credit-account (account:string amount:decimal)\n    (require-capability (CREDIT account))\n    (credit account (at ''guard (read ledger account)) amount)\n  )\n\n\n  (defun credit:string (account:string guard:guard amount:decimal)\n    (require-capability (CREDIT account))\n    (with-default-read ledger account\n      { \"balance\" : -1.0, \"guard\" : guard, \"restricted\" : false }\n      { \"balance\" := balance\n      , \"guard\" := retg\n      , \"restricted\" := restricted\n      }\n\n      (let ((is-new\n               (if (= balance -1.0)\n                   (enforce-reserved account guard)\n                 false)))\n\n        (enforce (= retg guard) \"account guards must match\")\n        (write ledger account\n          { \"balance\" : (if is-new amount (+ balance amount))\n          , \"guard\"   : retg\n          , \"restricted\" : restricted\n          })))\n  )\n\n  (defschema xinfo source-chain:string)\n  (defun xyield:object{xinfo} ()\n    { ''source-chain: (current-chain-id) })\n\n  (defpact transfer-crosschain:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      target-chain:string\n      amount:decimal )\n\n    (step (with-capability (XCHAIN)\n      (xchain-send sender receiver target-chain amount)))\n\n    (step\n      (resume { ''source-chain:= sc }\n        (with-capability (XCHAIN)\n          (xchain-receive sc receiver receiver-guard amount))))\n\n  )\n\n  (defun xchain-send:string\n    ( sender:string\n      receiver:string\n      target-chain:string\n      amount:decimal )\n    (require-capability (XCHAIN))\n    (with-capability (XCHAIN_DEBIT sender)\n      (enforce-valid-xchain-transfer\n        target-chain sender receiver (precision) amount)\n\n      (debit sender amount)\n      (emit-event (TRANSFER sender \"\" amount))\n      (yield (xyield) target-chain))\n      \"Send successful\"\n  )\n\n  (defun xchain-receive:string\n    ( source-chain:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal )\n    (require-capability (XCHAIN))\n    (with-capability (CREDIT receiver)\n      (emit-event (TRANSFER \"\" receiver amount))\n      (credit receiver receiver-guard amount))\n  )\n\n)\n\n(if (read-msg ''upgrade)\n  [\"upgrade\"]\n  [ (create-table ledger)\n    (create-table roles)\n    (init-roles)\n  ]\n)\n"}},"signers":[{"pubKey":"16e461ea50647c1b24183a4fb188cc6b2e84e721dc584cef96357a5a2d98c3a0"}],"meta":{"creationTime":1645097644,"ttl":600,"gasLimit":150000,"chainId":"0","gasPrice":1.0e-7,"sender":"k:16e461ea50647c1b24183a4fb188cc6b2e84e721dc584cef96357a5a2d98c3a0"},"nonce":"install kbtc"}'

